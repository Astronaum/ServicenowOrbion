<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script/>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>user_role_management_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>User Role Management Widget</name>
        <option_schema>[]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    var users = [];
	 	var roles = [];
    var token = gs.getProperty('x_1539348_so.scim.api.token');

    if (!token) {
        gs.error('Authorization token is missing.');
        return;
    }

    var restMessage = new sn_ws.RESTMessageV2();
    restMessage.setHttpMethod('GET');
    restMessage.setEndpoint('https://earth-apis.my.evidian.com/scim/v2/api/Users');
    restMessage.setRequestHeader('Authorization', 'Bearer ' + token);

    try {
        var response = restMessage.execute();
        var responseBody = response.getBody();
        var result = JSON.parse(responseBody);

        if (Array.isArray(result.Resources)) {
            result.Resources.forEach(function(user) {
                if (user) {
									  var userID = user.id ? user.id.toString() : '';
                    var userName = user.userName ? user.userName.toString() : '';  // Safeguard against null/undefined
                    var displayName = user.displayName ? user.displayName.toString() : '';  // Safeguard against null/undefined
                    var email = (user.emails && user.emails[0] && user.emails[0].value) ? user.emails[0].value.toString() : '';  // Safeguard for emails
                    var roles = (user.roles || []).map(function(role) {
                        return role.display ? role.display.toString() : '';  // Safeguard against null/undefined
                    });

                    users.push({
												id: userID,
                        userName: userName,
                        displayName: displayName,
                        email: email,
                        roles: roles
                    });
                }
            });
        } else {
            gs.error('No users found in SCIM response.');
        }
    } catch (e) {
        gs.error('Failed to fetch SCIM users: ' + e.message);
    }
	
		var gr = new GlideRecord('x_1539348_so_roles');
    gr.query();
    while (gr.next()) {
        roles.push({
            value: gr.getValue('value'),  // sys_id is typically used for the role
            label: gr.getValue('droit')     // Assuming 'name' is the field that holds the role name
        });
    }

    // Ensure users are passed to client-side in 'data'
    data.users = users;
		data.roles = roles;
		//gs.info('Fetched Users: ' + JSON.stringify(users));
		//gs.info('Fetched Roles: ' + JSON.stringify(roles));  // Logs the fetched users
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-09 12:41:46</sys_created_on>
        <sys_id>3334e07e831612103a32ffc6feaad372</sys_id>
        <sys_mod_count>188</sys_mod_count>
        <sys_name>User Role Management Widget</sys_name>
        <sys_package display_value="so" source="x_1539348_so">e2787a38830652103a32ffc6feaad3bd</sys_package>
        <sys_policy/>
        <sys_scope display_value="so">e2787a38830652103a32ffc6feaad3bd</sys_scope>
        <sys_update_name>sp_widget_3334e07e831612103a32ffc6feaad372</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-12 09:27:24</sys_updated_on>
        <template><![CDATA[<h2>User Role Management</h2>
<h3>Users List</h3>
<table>
    <thead>
        <tr>
            <th>User Name</th>
            <th>Display Name</th>
            <th>Email</th>
            <th>Roles</th>
            <th>Add Roles</th>
        </tr>
    </thead>
    <tbody>
        <tr ng-repeat="user in data.users">
            <td hidden>{{ user.id }}</td>
            <td>{{ user.userName }}</td>
            <td>{{ user.displayName }}</td>
            <td>{{ user.email }}</td>
            <td>
                <!-- Display the current roles for the user -->
                <span ng-repeat="role in user.roles">{{ role }}<br /></span>
            </td>
            <td>
                <!-- Dropdown to select roles -->
                <select ng-model="user.selectedRole" ng-options="role.value as role.label for role in data.roles">
                    <option value="">Select Role</option>
                </select>
                <button ng-click="addRoleToUser(user.id, user.selectedRol)">Add Role</button>
            </td>
        </tr>
    </tbody>
</table>
]]></template>
    </sp_widget>
</record_update>
